{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Jun  4 2021, 14:48:32) [GCC 7.5.0]\nCUDA available: True\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti\nGCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609\nPyTorch: 1.5.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.6.0a0+82fd1c8\nOpenCV: 4.5.2\nMMCV: 1.3.8\nMMDetection: 2.13.0+9a24f36\nMMDetection Compiler: GCC 7.3\nMMDetection CUDA Compiler: 10.1", "config": "checkpoint_config = dict(interval=3)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nmodel = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_input',\n        num_outs=5),\n    bbox_head=dict(\n        type='RetinaHead',\n        num_classes=20,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.4,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[2])\nrunner = dict(type='EpochBasedRunner', max_epochs=3)\ndataset_type = 'VOCDataset'\ndata_root = '/drive1/YH/datasets/VOCdevkit/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n                '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=[\n                '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/',\n                '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2012/'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file=\n        '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file=\n        '/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='/drive1/YH/datasets/VOCdevkit/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=3, metric='mAP')\nX_S_size = 413\nX_L_0_size = 827\ncycles = [0, 1, 2, 3, 4, 5, 6]\nepoch_ratio = [3, 1]\nepoch = 2\nX_L_repeat = 2\nX_U_repeat = 2\ntrain_cfg = dict(param_lambda=0.5)\nk = 10000\nuncertainty_type = 'Random'\nwork_dir = './work_dirs/default_runtime'\ngpu_ids = [6]\n", "seed": null, "exp_name": "default_runtime.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.001, "memory": 1949, "data_time": 0.04742, "loss_cls": 1.16178, "loss_bbox": 0.66076, "loss": 1.82254, "time": 0.19589}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.001, "memory": 1949, "data_time": 0.00521, "loss_cls": 1.15554, "loss_bbox": 0.65295, "loss": 1.80848, "time": 0.14606}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.001, "memory": 1949, "data_time": 0.00539, "loss_cls": 1.15445, "loss_bbox": 0.65487, "loss": 1.80931, "time": 0.14706}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.001, "memory": 1949, "data_time": 0.00494, "loss_cls": 1.15501, "loss_bbox": 0.64302, "loss": 1.79803, "time": 0.14424}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.001, "memory": 1949, "data_time": 0.00483, "loss_cls": 1.15141, "loss_bbox": 0.6502, "loss": 1.8016, "time": 0.14509}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.001, "memory": 1983, "data_time": 0.005, "loss_cls": 1.14668, "loss_bbox": 0.65238, "loss": 1.79905, "time": 0.14883}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.001, "memory": 1983, "data_time": 0.00507, "loss_cls": 1.10813, "loss_bbox": 0.62453, "loss": 1.73267, "time": 0.14613}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.001, "memory": 1983, "data_time": 0.00506, "loss_cls": 0.96131, "loss_bbox": 0.61473, "loss": 1.57605, "time": 0.1469}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.001, "memory": 1983, "data_time": 0.00514, "loss_cls": 0.88547, "loss_bbox": 0.61741, "loss": 1.50288, "time": 0.14702}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.001, "memory": 1983, "data_time": 0.00506, "loss_cls": 0.9172, "loss_bbox": 0.59142, "loss": 1.50862, "time": 0.14556}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.001, "memory": 1983, "data_time": 0.00507, "loss_cls": 0.88176, "loss_bbox": 0.59466, "loss": 1.47642, "time": 0.15013}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.001, "memory": 1983, "data_time": 0.00542, "loss_cls": 0.96376, "loss_bbox": 0.59045, "loss": 1.55422, "time": 0.14888}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.001, "memory": 1983, "data_time": 0.00524, "loss_cls": 0.97634, "loss_bbox": 0.58923, "loss": 1.56556, "time": 0.14754}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.001, "memory": 1983, "data_time": 0.00556, "loss_cls": 0.82145, "loss_bbox": 0.55943, "loss": 1.38088, "time": 0.14884}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.001, "memory": 1983, "data_time": 0.00547, "loss_cls": 0.77687, "loss_bbox": 0.58681, "loss": 1.36368, "time": 0.15003}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.001, "memory": 1983, "data_time": 0.00516, "loss_cls": 0.75429, "loss_bbox": 0.54931, "loss": 1.30359, "time": 0.14695}
